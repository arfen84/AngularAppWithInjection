// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Restaurant.Data;
using System;

namespace Restaurant.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180924214851_AllTablessAdded")]
    partial class AllTablessAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Restauracje.Models.Agroturystyczne", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.HasKey("ID");

                    b.ToTable("Agroturystyczne");
                });

            modelBuilder.Entity("Restauracje.Models.Apartament", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("klimatLokalu");

                    b.HasKey("ID");

                    b.ToTable("Apartamenty");
                });

            modelBuilder.Entity("Restauracje.Models.CentrumEventowe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("CentraEventowe");
                });

            modelBuilder.Entity("Restauracje.Models.CentrumRekreacji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.HasKey("ID");

                    b.ToTable("CentraRekreacji");
                });

            modelBuilder.Entity("Restauracje.Models.DomkiLetniskowe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.HasKey("ID");

                    b.ToTable("DomkiLetniskowe");
                });

            modelBuilder.Entity("Restauracje.Models.DomWeselny", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("DomyWeselne");
                });

            modelBuilder.Entity("Restauracje.Models.EscapeRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("klimatLokalu");

                    b.HasKey("ID");

                    b.ToTable("EscapeRoomy");
                });

            modelBuilder.Entity("Restauracje.Models.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("Hotele");
                });

            modelBuilder.Entity("Restauracje.Models.Karczma", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("Karczmy");
                });

            modelBuilder.Entity("Restauracje.Models.Kawiarnia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKawy");

                    b.HasKey("ID");

                    b.ToTable("Kawiarnie");
                });

            modelBuilder.Entity("Restauracje.Models.Klub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("klimatLokalu");

                    b.HasKey("ID");

                    b.ToTable("Kluby");
                });

            modelBuilder.Entity("Restauracje.Models.Mieszkanie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("klimatLokalu");

                    b.HasKey("ID");

                    b.ToTable("Mieszkania");
                });

            modelBuilder.Entity("Restauracje.Models.Pub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("Puby");
                });

            modelBuilder.Entity("Restauracje.Models.Restauracja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("Restauracje");
                });

            modelBuilder.Entity("Restauracje.Models.SalaBankietowa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<int>("iloscStolikow");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajKuchni");

                    b.HasKey("ID");

                    b.ToTable("SaleBankietowe");
                });

            modelBuilder.Entity("Restauracje.Models.SalaZabaw", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.HasKey("ID");

                    b.ToTable("SaleZabaw");
                });

            modelBuilder.Entity("Restauracje.Models.SciankaWspinaczkowa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.HasKey("ID");

                    b.ToTable("SciankiWspinaczkowe");
                });

            modelBuilder.Entity("Restauracje.Models.SPA", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adder");

                    b.Property<int>("Budzet");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<string>("Email");

                    b.Property<string>("Link");

                    b.Property<int>("MaxLiczbaGosci");

                    b.Property<string>("Miasto");

                    b.Property<string>("Nazwa");

                    b.Property<bool>("OplaconyAbonament");

                    b.Property<string>("Przyjecia");

                    b.Property<DateTime>("Termin");

                    b.Property<string>("dodatkoweOczekiwania");

                    b.Property<string>("dodatkoweUslugi");

                    b.Property<string>("klimatLokalu");

                    b.Property<string>("rodzajZabiegow");

                    b.HasKey("ID");

                    b.ToTable("SPA");
                });

            modelBuilder.Entity("Restaurant.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Restaurant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Restaurant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Restaurant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Restaurant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
